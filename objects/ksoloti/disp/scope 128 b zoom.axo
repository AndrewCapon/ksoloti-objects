<objdefs appVersion="1.0.12">
   <obj.normal id="scope 128 b zoom" uuid="698870c8-15f5-4fdc-adce-0e8de7eda6ef">
      <sDescription>Bipolar audio rate signal oscilloscope (time domain), showing 128 consecutive samples.

Zoom magnifies the waveform vertically. Good for quiet sounds and more efficient than
using external gain.

Timebase slows down the sampling, averaging the signal and displaying longer time frames.

NOTE: The code in this object is not optimized yet.</sDescription>
      <author>Johannes Taelman, sebiik</author>
      <license>BSD</license>
      <helpPatch>scope.axh</helpPatch>
      <rotatedParams>true</rotatedParams>
      <inlets>
         <frac32buffer.bipolar name="in" description="input"/>
         <bool32 name="hold" description="hold"/>
      </inlets>
      <outlets/>
      <displays>
         <int8array128.vbar name="scope" noLabel="true"/>
      </displays>
      <params/>
      <attribs>
         <combo name="zoom" description="vertical magnification">
            <MenuEntries>
               <string>x1</string>
               <string>x2</string>
               <string>x4</string>
               <string>x8</string>
            </MenuEntries>
            <CEntries>
               <string>21</string>
               <string>20</string>
               <string>19</string>
               <string>18</string>
            </CEntries>
         </combo>
         <combo name="timebase" description="display longer time frames">
            <MenuEntries>
               <string>/1</string>
               <string>/2</string>
               <string>/4</string>
               <string>/8</string>
               <string>/16</string>
            </MenuEntries>
            <CEntries>
               <string>0</string>
               <string>1</string>
               <string>2</string>
               <string>3</string>
               <string>4</string>
            </CEntries>
         </combo>
      </attribs>
      <code.declaration><![CDATA[int8_t t[128];
int index;]]></code.declaration>
      <code.init><![CDATA[int i;
for(i=0;i<128;i++)
	t[i]=0;

index = 0;]]></code.init>
      <code.krate><![CDATA[int i;

switch (attr_timebase) {
	case 0:
	for(i=0;i<16;i++)
		t[index++] = (uint8_t)__SSAT(inlet_in[i]>>attr_zoom, 8);
	break;

	case 1:
	for(i=0;i<8;i++)
		t[index++] = (uint8_t)__SSAT(((inlet_in[i*2]>>attr_timebase) + (inlet_in[i*2+1]>>attr_timebase))>>attr_zoom, 8);
	break;

	case 2:
	for(i=0;i<4;i++)
		t[index++] = (uint8_t)__SSAT(((inlet_in[i*4]>>attr_timebase) + (inlet_in[i*4+1]>>attr_timebase) + (inlet_in[i*4+2]>>attr_timebase) + (inlet_in[i*4+3]>>attr_timebase))>>attr_zoom, 8);
	break;

	case 3:
	for(i=0;i<2;i++)
		t[index++] = (uint8_t)__SSAT(((inlet_in[i*8]>>attr_timebase) + (inlet_in[i*8+1]>>attr_timebase) + (inlet_in[i*8+2]>>attr_timebase) + (inlet_in[i*8+3]>>attr_timebase) + (inlet_in[i*8+4]>>attr_timebase) + (inlet_in[i*8+5]>>attr_timebase) + (inlet_in[i*8+6]>>attr_timebase) + (inlet_in[i*8+7]>>attr_timebase))>>attr_zoom, 8);
	break;

	case 4:
	t[index++] = (uint8_t)__SSAT(((inlet_in[0]>>attr_timebase) + (inlet_in[1]>>attr_timebase) + (inlet_in[2]>>attr_timebase) + (inlet_in[3]>>attr_timebase) + (inlet_in[4]>>attr_timebase) + (inlet_in[5]>>attr_timebase) + (inlet_in[6]>>attr_timebase) + (inlet_in[7]>>attr_timebase) + (inlet_in[8]>>attr_timebase) + (inlet_in[9]>>attr_timebase) + (inlet_in[10]>>attr_timebase) + (inlet_in[11]>>attr_timebase) + (inlet_in[12]>>attr_timebase) + (inlet_in[13]>>attr_timebase) + (inlet_in[14]>>attr_timebase) + (inlet_in[15]>>attr_timebase))>>attr_zoom, 8);
	break;
}



if (index == 128) {
	index = 0;
	if (!inlet_hold) {
		for(i=0;i<128;i++)
 			disp_scope[i]=t[i];
	}
}]]></code.krate>
   </obj.normal>
</objdefs>