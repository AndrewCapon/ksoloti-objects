<objdefs appVersion="1.0.12">
   <obj.normal id="scope 128 b trig zoom" uuid="1e502ace-1033-4a32-ad32-412d01ec7558">
      <sDescription>Bipolar audio rate signal oscilloscope (time domain), showing 128 consecutive samples
after the signal becomes positive.

Magnify zooms in the waveform vertically. Good for quiet sounds and more efficient than
using external gain.

Timebase slows down the sampling, displaying longer time frames.

</sDescription>
      <author>Johannes Taelman, Ksoloti</author>
      <license>BSD</license>
      <helpPatch>scope.axh</helpPatch>
      <rotatedParams>true</rotatedParams>
      <inlets>
         <frac32buffer.bipolar name="in" description="input"/>
         <bool32 name="hold" description="hold"/>
      </inlets>
      <outlets/>
      <displays>
         <int8array128.vbar name="scope" noLabel="true"/>
      </displays>
      <params/>
      <attribs>
         <combo name="magnify" description="vertical magnification">
            <MenuEntries>
               <string>x1</string>
               <string>x2</string>
               <string>x4</string>
               <string>x8</string>
            </MenuEntries>
            <CEntries>
               <string>21</string>
               <string>20</string>
               <string>19</string>
               <string>18</string>
            </CEntries>
         </combo>
         <combo name="timebase" description="display longer time frames">
            <MenuEntries>
               <string>/1</string>
               <string>/2</string>
               <string>/4</string>
               <string>/8</string>
               <string>/16</string>
            </MenuEntries>
            <CEntries>
               <string>0</string>
               <string>1</string>
               <string>2</string>
               <string>3</string>
               <string>4</string>
            </CEntries>
         </combo>
      </attribs>
      <code.declaration><![CDATA[int8_t t[128];
int index;
int32_t pval;]]></code.declaration>
      <code.init><![CDATA[int i;
for(i=0;i<128;i++) t[i]=0;
index = 0;
pval = 0;]]></code.init>
      <code.krate><![CDATA[int i;
if (index<0) {
	for(i=0;i<16;i++){
      int32_t val = (inlet_in[i])>(1<<19);
      if (val&&(!pval)){
         index=0; break;
      }
      pval = val;
   }
   if (index == 0){
#if attr_timebase == 0
			for(i=0;i<16;i++)
				t[index++] = (uint8_t)__SSAT(inlet_in[i]>>attr_magnify, 8);
		
#elif attr_timebase == 1
			for(i=0;i<8;i++)
				t[index++] = (uint8_t)__SSAT(inlet_in[i*2]>>attr_magnify, 8);
				// t[index++] = (uint8_t)__SSAT(((inlet_in[i*2]>>attr_timebase) + (inlet_in[i*2+1]>>attr_timebase))>>attr_magnify, 8);
		
#elif attr_timebase == 2
			for(i=0;i<4;i++)
				t[index++] = (uint8_t)__SSAT(inlet_in[i*4]>>attr_magnify, 8);
				// t[index++] = (uint8_t)__SSAT(((inlet_in[i*4]>>attr_timebase) + (inlet_in[i*4+1]>>attr_timebase) + (inlet_in[i*4+2]>>attr_timebase) + (inlet_in[i*4+3]>>attr_timebase))>>attr_magnify, 8);
		
#elif attr_timebase == 3
			for(i=0;i<2;i++)
				t[index++] = (uint8_t)__SSAT(inlet_in[i*8]>>attr_magnify, 8);
				// t[index++] = (uint8_t)__SSAT(((inlet_in[i*8]>>attr_timebase) + (inlet_in[i*8+1]>>attr_timebase) + (inlet_in[i*8+2]>>attr_timebase) + (inlet_in[i*8+3]>>attr_timebase) + (inlet_in[i*8+4]>>attr_timebase) + (inlet_in[i*8+5]>>attr_timebase) + (inlet_in[i*8+6]>>attr_timebase) + (inlet_in[i*8+7]>>attr_timebase))>>attr_magnify, 8);

#elif attr_timebase == 4
         t[index++] = (uint8_t)__SSAT(inlet_in[0]>>attr_magnify, 8);
			// t[index++] = (uint8_t)__SSAT(((inlet_in[0]>>attr_timebase) + (inlet_in[1]>>attr_timebase) + (inlet_in[2]>>attr_timebase) + (inlet_in[3]>>attr_timebase) + (inlet_in[4]>>attr_timebase) + (inlet_in[5]>>attr_timebase) + (inlet_in[6]>>attr_timebase) + (inlet_in[7]>>attr_timebase) + (inlet_in[8]>>attr_timebase) + (inlet_in[9]>>attr_timebase) + (inlet_in[10]>>attr_timebase) + (inlet_in[11]>>attr_timebase) + (inlet_in[12]>>attr_timebase) + (inlet_in[13]>>attr_timebase) + (inlet_in[14]>>attr_timebase) + (inlet_in[15]>>attr_timebase))>>attr_magnify, 8);
#endif
   }
} else {
#if attr_timebase == 0
			if(index==128) {
		         index=-1;
         }
         else {
            for(i=0;i<16;i++)
               t[index++] = (uint8_t)__SSAT(inlet_in[i]>>attr_magnify, 8);
         }
		
#elif attr_timebase == 1
			if(index==128) {
            index=-1;
         }
         else {
            for(i=0;i<8;i++)
               t[index++] = (uint8_t)__SSAT(inlet_in[i*2]>>attr_magnify, 8);
         }
		
#elif attr_timebase == 2
			if(index==128) {
            index=-1;
         }
         else {
            for(i=0;i<4;i++)
               t[index++] = (uint8_t)__SSAT(inlet_in[i*4]>>attr_magnify, 8);
         }
		
#elif attr_timebase == 3
			if(index==128) {
            index=-1;
         }
         else {
            for(i=0;i<2;i++)
               t[index++] = (uint8_t)__SSAT(inlet_in[i*8]>>attr_magnify, 8);
         }

#elif attr_timebase == 4
			if(index==128) {
            index=-1;
         }
         else {
            t[index++] = (uint8_t)__SSAT(inlet_in[0]>>attr_magnify, 8);
         }
#endif
		
   if ((index==-1)&&(!inlet_hold)){
     for(i=0;i<128;i++)
       disp_scope[i]=t[i];
     pval = (inlet_in[BUFSIZE-1])>(1<<19);
   }
}]]></code.krate>
   </obj.normal>
</objdefs>