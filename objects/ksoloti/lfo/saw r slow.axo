<objdefs appVersion="1.0.12">
   <obj.normal id="saw r slow" uuid="7bf77792-c5b7-4c3f-9b0b-cb033314890c">
      <sDescription>saw wave LFO, rising slope, pitch input, phase reset. Time divisor allows for very slow cycles. Note that the frequency display will only display the base frequency and not the one after time division.</sDescription>
      <author>Johannes Taelman, Ksoloti</author>
      <license>BSD</license>
      <helpPatch>lfo.axh</helpPatch>
      <inlets>
         <frac32.bipolar name="pitch" description="pitch"/>
         <bool32.rising name="reset" description="reset phase"/>
      </inlets>
      <outlets>
         <frac32.positive name="wave" description="saw wave"/>
         <bool32.pulse name="sync" description="sync output"/>
      </outlets>
      <displays/>
      <params>
         <frac32.s.map.lfopitch name="pitch" noLabel="true"/>
      </params>
      <attribs>
         <combo name="divisor" description="LFO is slowed down by this divisor. /2 means half as fast etc.">
            <MenuEntries>
               <string>/1 (7.83 s)</string>
               <string>/2 (15.66 s)</string>
               <string>/4 (31.32 s)</string>
               <string>/8 (62.64 s)</string>
               <string>/16 (125.28 s)</string>
               <string>/32 (250.56 s)</string>
            </MenuEntries>
            <CEntries>
               <string>2</string>
               <string>3</string>
               <string>4</string>
               <string>5</string>
               <string>6</string>
               <string>7</string>
            </CEntries>
         </combo>
      </attribs>
      <code.declaration><![CDATA[uint32_t Phase;
int32_t pPhase;
uint32_t r;
]]></code.declaration>
      <code.init><![CDATA[Phase = 0;
pPhase = 0;
   r = 1;
]]></code.init>
      <code.krate><![CDATA[{
      if (inlet_reset && r) {
         Phase = 0;
         r = 0;
      } else {
         if (!inlet_reset) r = 1;
         int32_t freq;
         MTOFEXTENDED(param_pitch + inlet_pitch,freq);
         Phase += freq >> attr_divisor;
      }
      outlet_sync = (((int32_t)Phase)>=0)&&(pPhase<0);
      outlet_wave= (Phase>>5);
      pPhase = Phase;
   }]]></code.krate>
   </obj.normal>
</objdefs>