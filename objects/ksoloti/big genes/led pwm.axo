<objdefs appVersion="1.0.12">
   <obj.normal id="led pwm" uuid="f446b7ca-99c6-493d-97d0-20314da49589">
      <sDescription>PWM output to an LED on Ksoloti Big Genes.
Using a hardware timer at a fixed frequency of 97.65 Hz.
(Or using software PWM for LED1 which does not have hardware PWM functionality).

LED1 (green, PG6) using software
LED2 (red, PC6) using hardware timer 8
LED3 (dual-color, PA9 and PC7) using hardware timers 1 and 8
LED4 (dual-color, PB6 and PB7) using hardware timer 4</sDescription>
      <author>Johannes Taelman, Ksoloti</author>
      <license>BSD</license>
      <helpPatch>led big genes.axh</helpPatch>
      <inlets>
         <frac32.positive name="in" description="pwm ratio"/>
      </inlets>
      <outlets/>
      <displays/>
      <params/>
      <attribs>
         <combo name="led">
            <MenuEntries>
               <string>1</string>
               <string>2</string>
               <string>3 blue</string>
               <string>3 red</string>
               <string>4 blue</string>
               <string>4 red</string>
            </MenuEntries>
            <CEntries>
               <string>0x66</string>
               <string>0x26</string>
               <string>0x09</string>
               <string>0x27</string>
               <string>0x16</string>
               <string>0x17</string>
            </CEntries>
         </combo>
      </attribs>
      <depends>
         <depend>PWMD4</depend>
         <depend>PWMD8</depend>
         <depend>PWMD1</depend>
      </depends>
      <code.declaration><![CDATA[#if attr_led == 0x66 /* LED1 does not have hardware PWM, so we use a software comparator */
uint8_t counter = 0;
#endif]]></code.declaration>
      <code.init><![CDATA[#if attr_led != 0x66 /* All LEDs except LED1 use this hardware PWM configuration */
static const PWMConfig pwmcfg = {400000, /* 400kHz PWM clock frequency.  */
	4096, /* PWM period is 128 cycles.    */
	NULL, 
	{{PWM_OUTPUT_ACTIVE_HIGH, NULL}, 
	{PWM_OUTPUT_ACTIVE_HIGH, NULL},
	{PWM_OUTPUT_ACTIVE_HIGH, NULL}, 
	{PWM_OUTPUT_ACTIVE_HIGH, NULL}},
	/* HW dependent part.*/
	0};
#endif


#if attr_led == 0x26 /* LED2 */
#ifndef PWMD8STARTED__
#define PWMD8STARTED__
pwmStart(&PWMD8, &pwmcfg);
#endif
palSetPadMode(GPIOC, 6, PAL_MODE_ALTERNATE(3));
sysmon_disable_blinker();
PWMD8.tim->CCER |= STM32_TIM_CCER_CC1NE | STM32_TIM_CCER_CC1NP;


#elif attr_led == 0x09 /* LED3 color A */
#ifndef PWMD1STARTED__
#define PWMD1STARTED__
pwmStart(&PWMD1, &pwmcfg);
#endif
palSetPadMode(GPIOA, 9, PAL_MODE_ALTERNATE(1));


#elif attr_led == 0x27 /* LED3 color B */
#ifndef PWMD8STARTED__
#define PWMD8STARTED__
pwmStart(&PWMD8, &pwmcfg);
#endif
palSetPadMode(GPIOC, 7, PAL_MODE_ALTERNATE(3));


#elif attr_led == 0x16 /* LED4 color A */
#ifndef PWMD4STARTED__
#define PWMD4STARTED__
pwmStart(&PWMD4, &pwmcfg);
#endif
palSetPadMode(GPIOB, 6, PAL_MODE_ALTERNATE(2));
PWMD4.tim->CCER |= STM32_TIM_CCER_CC1NE | STM32_TIM_CCER_CC1NP;


#elif attr_led == 0x17 /* LED4 color B */
#ifndef PWMD4STARTED__
#define PWMD4STARTED__
pwmStart(&PWMD4, &pwmcfg);
#endif
palSetPadMode(GPIOB, 7, PAL_MODE_ALTERNATE(2));
PWMD4.tim->CCER |= STM32_TIM_CCER_CC2NE | STM32_TIM_CCER_CC2NP;


#endif]]></code.init>
      <code.dispose><![CDATA[#if attr_led == 0x26 /* LED2 */
pwmStop(&PWMD8);

#elif attr_led == 0x09 /* LED3 color A */
pwmStop(&PWMD1);

#elif attr_led == 0x27 /* LED3 color B */
pwmStop(&PWMD8);

#elif attr_led == 0x16 /* LED4 color A */
pwmStop(&PWMD4);

#elif attr_led == 0x17 /* LED4 color B */
pwmStop(&PWMD4);

#endif]]></code.dispose>
      <code.krate><![CDATA[#if attr_led == 0x66 /* LED1 does not have hardware PWM, so we use a crude software comparator */

uint8_t pwmval = (inlet_in > 0 ? inlet_in>>19 : 0);

/* Only 64 PWM steps on LED1, so it might look jittery/flashy */
/* K-rate 3000 Hz divided by 64 = 46.9 Hz. Only half the speed of the hardware PWM on the other LEDs. */

/* counter increments through 64 steps at k-rate. Output is high as long as counter is smaller than pwmvalue, low otherwise. */
palWritePad(GPIOG,6, (counter < pwmval ? 1 : 0));
counter += 4;


#elif attr_led == 0x26 /* LED2 */
pwmEnableChannel(&PWMD8, 0, (pwmcnt_t)(inlet_in >=0 ? inlet_in>>15 : 0));


#elif attr_led == 0x09 /* LED3 color A */
pwmEnableChannel(&PWMD1, 1, (pwmcnt_t)(inlet_in>= 0 ? inlet_in>>15 : 0));


#elif attr_led == 0x27 /* LED3 color B */
pwmEnableChannel(&PWMD8, 1, (pwmcnt_t)(inlet_in>= 0 ? inlet_in>>15 : 0));


#elif attr_led == 0x16 /* LED4 color A */
pwmEnableChannel(&PWMD4, 0, (pwmcnt_t)(inlet_in >= 0 ? inlet_in>>15 : 0));


#elif attr_led == 0x17 /* LED4 color B */
pwmEnableChannel(&PWMD4, 1, (pwmcnt_t)(inlet_in >= 0 ? inlet_in>>15 : 0));

#endif]]></code.krate>
   </obj.normal>
</objdefs>