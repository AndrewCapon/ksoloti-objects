<objdefs appVersion="1.0.12">
   <obj.normal id="reverb" uuid="8027561C-A0B5-4DF8-A10E-3ED1274F2980">
      <sDescription>a reverb effect, based the on elements reverb dsp code open sourced by mutable instruments.
any bugs/issues you find are our own, report on the axoloti forum.

Thanks to Olivier Gillet from Mutable Instruments for open sourcing their code.
http://mutable-instruments.com</sDescription>
      <author>Mark Harris</author>
      <license>GPL</license>
      <inlets>
         <frac32buffer name="l"/>
         <frac32buffer name="r"/>
      </inlets>
      <outlets>
         <frac32buffer name="l"/>
         <frac32buffer name="r"/>
      </outlets>
      <displays/>
      <params>
         <frac32.u.map name="amount"/>
         <frac32.u.map name="time"/>
         <frac32.u.map name="diffusion"/>
         <frac32.u.map name="gain"/>
         <frac32.u.map name="lowpass"/>
      </params>
      <attribs/>
      <code.declaration><![CDATA[elements::Reverb reverb;]]></code.declaration>
      <code.init><![CDATA[uint16_t* buf = (uint16_t*) sdram_malloc(32768);
if(!buf) return;
reverb.Init(buf);]]></code.init>
      <code.krate><![CDATA[static float left[BUFSIZE];
static float right[BUFSIZE];

int i;

reverb.set_amount(q27_to_float(param_amount));
reverb.set_input_gain(q27_to_float(param_gain));
reverb.set_time(q27_to_float(param_time));
reverb.set_diffusion(q27_to_float(param_diffusion));
reverb.set_lp(q27_to_float(param_lowpass));

for(i=0;i<BUFSIZE;i++){
	left[i] = q27_to_float(inlet_l[i]);
	right[i] = q27_to_float(inlet_r[i]);
}

reverb.Process(left,right,BUFSIZE);

for(i=0;i<BUFSIZE;i++){
	outlet_l[i] = float_to_q27(left[i]);
	outlet_r[i] = float_to_q27(right[i]);
}]]></code.krate>
   </obj.normal>
</objdefs>