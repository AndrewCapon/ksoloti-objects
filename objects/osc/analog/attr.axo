<objdefs appVersion="1.0.10">
   <obj.normal id="attr" uuid="fcecc5d0-62b8-4f13-9006-18339bd51809">
      <sDescription>virtual analog oscillators from Mutable Instruments Braids</sDescription>
      <author>Johannes Taelman</author>
      <license>BSD</license>
      <helpPatch>osc.axh</helpPatch>
      <inlets>
         <frac32.bipolar name="pitch" description="pitch"/>
      </inlets>
      <outlets>
         <frac32buffer.bipolar name="wave" description="sine wave"/>
      </outlets>
      <displays/>
      <params>
         <frac32.s.map.pitch name="pitch" noLabel="true"/>
         <frac32.s.map name="param"/>
      </params>
      <attribs>
         <combo name="shape">
            <MenuEntries>
               <string>saw</string>
               <string>variable_saw</string>
               <string>csaw</string>
               <string>square</string>
               <string>triangle</string>
               <string>sine</string>
               <string>triangle_fold</string>
               <string>sine_fold</string>
               <string>buzz</string>
            </MenuEntries>
            <CEntries>
               <string>OSC_SHAPE_SAW</string>
               <string>OSC_SHAPE_VARIABLE_SAW</string>
               <string>OSC_SHAPE_CSAW</string>
               <string>OSC_SHAPE_SQUARE</string>
               <string>OSC_SHAPE_TRIANGLE</string>
               <string>OSC_SHAPE_SINE</string>
               <string>OSC_SHAPE_TRIANGLE_FOLD</string>
               <string>OSC_SHAPE_SINE_FOLD</string>
               <string>OSC_SHAPE_BUZZ</string>
            </CEntries>
         </combo>
      </attribs>
      <includes>
         <include>mutable_instruments/braids/analog_oscillator.h</include>
      </includes>
      <code.declaration><![CDATA[braids::AnalogOscillator analogOscillator;]]></code.declaration>
      <code.init><![CDATA[analogOscillator.set_shape(braids::attr_shape);]]></code.init>
      <code.krate><![CDATA[analogOscillator.set_parameter(param_param>>12);
analogOscillator.set_pitch((64<<7)+((param_pitch + inlet_pitch)>>14));

uint8_t sync_in[BUFSIZE];
int16_t buffer[BUFSIZE];
uint8_t sync_out[BUFSIZE];

int i;
for(i=0;i<BUFSIZE;i++){
	sync_in[i] = 0;
}
analogOscillator.Render(sync_in,buffer,sync_out,BUFSIZE);
for(i=0;i<BUFSIZE;i++){
	outlet_wave[i] = buffer[i]<<11;
}]]></code.krate>
   </obj.normal>
</objdefs>